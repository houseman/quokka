[project]
name = "quokka"
version = "0.0.0.dev0"
description = "The quokka is a small macropod about the size of a domestic cat."
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [{ name = "Scott Houseman", email = "scott.houseman@gmail.com" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
keywords = ["python"]
dependencies = ["requests"]

[project.urls]
homepage = "https://github.com/houseman/quokka"
repository = "https://github.com/houseman/quokka"

[project.optional-dependencies]
dev = [
  # Dev tools
  "ruff",
  "mypy",
  # Type stubs
  "types-requests",
]
test = [
  # Test dependencies
  "pytest",
  "pytest-cov",
  "pytest-mock",
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["quokka*"]
namespaces = false

[tool.ruff]
# The directories to consider when resolving first- vs. third-party imports.
src = ["src"]
# Maximum line length = Black + 21
line-length = 109
# The minimum Python version to target i.e always generate code compatible to this version
target-version = "py311"

[tool.ruff.lint]
select = [
  "E",   # pycodestyle Error
  "F",   # Pyflakes
  "B",   # flake8-bugbear
  "W",   # pycodestyle Warning
  "I",   # isort
  "N",   # pep8-naming
  "D",   # pydocstyle
  "PL",  # Pylint
  "UP",  # pyupgrade
  "SIM", # flake8-simplify
]
ignore = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D104", # Missing docstring in public package
  "D107", # Missing docstring in `__init__`
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
]

[tool.ruff.per-file-ignores]
"**/tests/*" = [
  "D104",    # Missing docstring in public package
  "D100",    # Missing docstring in public module
  "D103",    # Missing docstring in public function
  "D205",    # 1 blank line required between summary line and description
  "D400",    # First line should end with a period
  "D415",    # First line should end with a period, question mark, or exclamation point
  "PLR2004", # Magic value used in comparison
]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.isort]
# Use a single line between direct and from import
lines-between-types = 1

[tool.ruff.lint.pylint]
max-args = 8

[tool.mypy]
strict = true
files = ["src"]
exclude = ["build"]
python_version = "3.11"
ignore_errors = false
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_no_return = true

[[tool.mypy.overrides]]
module = ["tests.*", "noxfile"]
ignore_errors = true


[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
addopts = "--cov --cov-report html --cov-report term-missing --cov-report xml --no-cov-on-fail --cov-fail-under 100"

[tool.coverage.run]
branch = true
source = ["src"]
omit = ["tests/*"]
